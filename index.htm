<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON Key-Value Editor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .dragging {
            opacity: 0.5;
            background-color: #e5e7eb;
        }
        .drop-area {
            border: 2px dashed #9ca3af;
            transition: all 0.3s;
        }
        .drop-area.active {
            border-color: #3b82f6;
            background-color: #eff6ff;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">JSON Key-Value Editor</h1>
            <p class="text-gray-600 mb-6">Create and edit JSON files with key-value pairs</p>
            
            <div class="bg-white rounded-lg shadow-md overflow-hidden mb-6">
                <div class="p-4 border-b border-gray-200 bg-gray-50 flex flex-wrap justify-between items-center gap-4">
                    <div class="flex items-center space-x-2">
                        <button id="addBtn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition flex items-center">
                            <i class="fas fa-plus mr-2"></i> Add Pair
                        </button>
                        <button id="saveBtn" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition flex items-center">
                            <i class="fas fa-save mr-2"></i> Save JSON
                        </button>
                        <button id="resetKeysBtn" class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition flex items-center">
                            <i class="fas fa-redo mr-2"></i> Reset Keys [For Cracktale Only]
                        </button>
                        <label class="inline-flex items-center ml-2 cursor-pointer">
                            <input type="checkbox" id="gmCheckbox" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-offset-0 focus:ring-blue-200 focus:ring-opacity-50">
                            <span class="ml-2 text-gray-700">Used with GameMaker?</span>
                        </label>
                    </div>
                    <div class="relative">
                        <label for="fileInput" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition flex items-center cursor-pointer">
                            <i class="fas fa-folder-open mr-2"></i> Load JSON
                        </label>
                        <input type="file" id="fileInput" accept=".json" class="hidden">
                    </div>
                </div>
                
                <div id="dropArea" class="drop-area p-4 min-h-32">
                    <div id="keyValuePairs" class="space-y-3">
                        <!-- Key-value pairs will be added here -->
                        <div class="text-center text-gray-500 py-4" id="emptyMessage">
                            No key-value pairs added yet. Click "Add Pair" to get started.
                        </div>
                    </div>
                </div>
                
                <div class="p-4 border-t border-gray-200 bg-gray-50">
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-600">
                            <span id="pairCount">0</span> key-value pairs
                        </span>
                        <button id="copyBtn" class="px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition flex items-center text-sm">
                            <i class="fas fa-copy mr-1"></i> Copy JSON
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="p-4 border-b border-gray-200 bg-gray-50">
                    <h2 class="font-semibold text-gray-700">JSON Preview</h2>
                </div>
                <div class="p-4">
                    <pre id="jsonPreview" class="bg-gray-100 p-4 rounded-md text-gray-800 overflow-x-auto text-sm">{
    "example_key": "example_value"
}</pre>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const keyValuePairs = document.getElementById('keyValuePairs');
            const addBtn = document.getElementById('addBtn');
            const saveBtn = document.getElementById('saveBtn');
            const fileInput = document.getElementById('fileInput');
            const copyBtn = document.getElementById('copyBtn');
            const jsonPreview = document.getElementById('jsonPreview');
            const pairCount = document.getElementById('pairCount');
            const emptyMessage = document.getElementById('emptyMessage');
            const dropArea = document.getElementById('dropArea');
            
            let pairs = [];
            let draggedItem = null;
            const gmCheckbox = document.getElementById('gmCheckbox');
            const gmPrefixes = {
                'obj': 'gml_Object_',
                'object': 'gml_Object_',
                'scr': 'gml_Script_',
                'script': 'gml_Script_',
                'spr': 'gml_Sprite_',
                'sprite': 'gml_Sprite_',
                'bg': 'gml_Background_',
                'background': 'gml_Background_',
                'fnt': 'gml_Font_',
                'font': 'gml_Font_',
                'snd': 'gml_Sound_',
                'sound': 'gml_Sound_',
                'rm': 'gml_Room_',
                'room': 'gml_Room_',
                'tls': 'gml_Tileset_',
                'tileset': 'gml_Tileset_',
                'sh': 'gml_Shader_',
                'shader': 'gml_Shader_',
                'tim': 'gml_Timeline_',
                'timeline': 'gml_Timeline_',
                'path': 'gml_Path_'
            };
            
            // Add new key-value pair
            addBtn.addEventListener('click', function() {
                addPair('', '');
                updatePreview();
            });
            
            // Save JSON file
            saveBtn.addEventListener('click', function() {
                if (pairs.length === 0) {
                    alert('No key-value pairs to save!');
                    return;
                }
                
                const json = generateJSON();
                const blob = new Blob([json], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = 'key_value_pairs.json';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            });
            
            // Load JSON file
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const json = JSON.parse(e.target.result);
                        if (typeof json !== 'object' || json === null) {
                            throw new Error('Invalid JSON structure');
                        }
                        loadPairs(json);
                    } catch (error) {
                        alert('Error loading JSON file: ' + error.message);
                        console.error('JSON load error:', error);
                    }
                };
                reader.onerror = function() {
                    alert('Error reading file');
                };
                reader.readAsText(file);
            });
            
            // Reset Keys button functionality
            document.getElementById('resetKeysBtn').addEventListener('click', function () {
				const currentPairs = pairs.map(pair => {
					const match = pair.key.match(/^(.+?)_slash_(.+?)_gml_(\d+)(?:_(\d+))?$/);
					let newKey = pair.key;
					if (match) {
						const prefix = match[1];
						const mainId = match[3];
						const subId = match[4];

						if (!subId || subId === '0') {
							newKey = `${prefix}_dialogue_${mainId}`;
						} else {
							newKey = `${prefix}_dialogue_${mainId}_${subId}`;
						}
					}
					return { ...pair, key: newKey };
				});

				// Очистка DOM
				const existingElements = keyValuePairs.querySelectorAll('[data-id]');
				existingElements.forEach(el => el.remove());

				// Перестройка пар
				pairs = [];
				currentPairs.forEach(pair => {
					addPair(pair.key, pair.value);
				});

				updatePreview();
			});


            // Copy JSON to clipboard
            copyBtn.addEventListener('click', function() {
                const json = generateJSON();
                navigator.clipboard.writeText(json)
                    .then(() => {
                        const originalText = copyBtn.innerHTML;
                        copyBtn.innerHTML = '<i class="fas fa-check mr-1"></i> Copied!';
                        setTimeout(() => {
                            copyBtn.innerHTML = originalText;
                        }, 2000);
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                    });
            });
            
            // Drag and drop functionality
            dropArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                dropArea.classList.add('active');
            });
            
            dropArea.addEventListener('dragleave', function() {
                dropArea.classList.remove('active');
            });
            
            dropArea.addEventListener('drop', function(e) {
                e.preventDefault();
                dropArea.classList.remove('active');
                
                const file = e.dataTransfer.files[0];
                if (!file || !file.name.endsWith('.json')) return;
                
                fileInput.files = e.dataTransfer.files;
                const event = new Event('change');
                fileInput.dispatchEvent(event);
            });
            
            // Add a new key-value pair
            function addPair(key, value) {
                const id = crypto.randomUUID ? crypto.randomUUID() : Date.now() + '_' + Math.random();
                const pair = { id, key, value, event: 'none' };
                pairs.push(pair);
                
                const pairElement = document.createElement('div');
                pairElement.className = 'flex items-center space-x-3 p-3 bg-gray-50 rounded-md border border-gray-200';
                pairElement.dataset.id = id;
                pairElement.draggable = true;
                
                // Escape HTML in values to prevent XSS and display issues
                const escapeHtml = (str) => {
                    return str.replace(/[&<>'"]/g, 
                        tag => ({
                            '&': '&amp;',
                            '<': '&lt;',
                            '>': '&gt;',
                            "'": '&#39;',
                            '"': '&quot;'
                        }[tag]));
                };
                
                const escapedKey = escapeHtml(key);
                const escapedValue = escapeHtml(value);
                
                pairElement.innerHTML = `
                    <div class="cursor-move text-gray-400 hover:text-gray-600 drag-handle">
                        <i class="fas fa-grip-vertical"></i>
                    </div>
                    <div class="flex-1 grid grid-cols-1 md:grid-cols-3 gap-3">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">${gmCheckbox.checked ? 'Resource' : 'Key'}</label>
                            <input type="text" class="key-input flex-1 min-w-0 block w-full px-3 py-2 rounded-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500" value="${escapedKey}" placeholder="${gmCheckbox.checked ? 'Enter resource (e.g. obj_player)' : 'Enter key'}">
                        </div>
                        <div class="event-dropdown-container ${gmCheckbox.checked ? '' : 'hidden'}">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Event</label>
                            <select class="event-dropdown block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                                <option value="none">None</option>
                                <option value="create">Create</option>
                                <option value="begin_step">Begin Step</option>
                                <option value="step">Step</option>
                                <option value="end_step">End Step</option>
                                <option value="draw">Draw</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Value</label>
                            <input type="text" class="value-input flex-1 min-w-0 block w-full px-3 py-2 rounded-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500" value="${escapedValue}" placeholder="Enter value">
                        </div>
                    </div>
                    <button class="delete-btn px-3 py-1 bg-red-100 text-red-600 rounded-md hover:bg-red-200 transition">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                
                if (emptyMessage) emptyMessage.style.display = 'none';
                
                // Insert before the empty message or at the end
                keyValuePairs.insertBefore(pairElement, emptyMessage || null);
                
                // Add event listeners
                const keyInput = pairElement.querySelector('.key-input');
                const valueInput = pairElement.querySelector('.value-input');
                const deleteBtn = pairElement.querySelector('.delete-btn');
                const dragHandle = pairElement.querySelector('.drag-handle');
                
                function updateKey(pairElement, pair) {
                    const keyInput = pairElement.querySelector('.key-input');
                    const eventDropdown = pairElement.querySelector('.event-dropdown');
                    
                    if (!keyInput || !pair) return;
                    
                    let displayKey = keyInput.value;
                    
                    if (gmCheckbox.checked) {
                        // Apply GameMaker prefix transformation (case-insensitive)
                        const prefixMatch = keyInput.value.match(/^([a-z]+)_/i);
                        if (prefixMatch && prefixMatch[1]) {
                            let lowerPrefix = prefixMatch[1].toLowerCase();
                            // Handle both short and long forms
                            if (lowerPrefix.startsWith('obj') || lowerPrefix.startsWith('object')) {
                                lowerPrefix = 'object';
                                const eventValue = eventDropdown ? eventDropdown.value : 'none';
                                const objParts = keyInput.value.split('_');
                                const objNum = objParts[objParts.length - 1];
                                const objName = objParts.slice(0, -1).join('_');
                                
                                switch(eventValue) {
                                    case 'none':
                                        displayKey = `gml_Object_${objName}_${objNum}`;
                                        break;
                                    case 'create':
                                        displayKey = `gml_Object_${objName}_Create_0_${objNum}`;
                                        break;
                                    case 'begin_step':
                                        displayKey = `gml_Object_${objName}_Step_1_${objNum}`;
                                        break;
                                    case 'step':
                                        displayKey = `gml_Object_${objName}_Step_0_${objNum}`;
                                        break;
                                    case 'end_step':
                                        displayKey = `gml_Object_${objName}_Step_2_${objNum}`;
                                        break;
                                    case 'draw':
                                        displayKey = `gml_Object_${objName}_Draw_0_${objNum}`;
                                        break;
                                    default:
                                        displayKey = gmPrefixes[lowerPrefix] + keyInput.value;
                                }
                            } else {
                                if (gmPrefixes[lowerPrefix]) {
                                    displayKey = gmPrefixes[lowerPrefix] + keyInput.value;
                                }
                            }
                        }
                    }
                    
                    pair.key = displayKey;
                    updatePreview();
                }

                keyInput.addEventListener('input', function() {
                    const pair = pairs.find(p => p.id === id);
                    updateKey(pairElement, pair);
                });
                
                valueInput.addEventListener('input', function() {
                    const pair = pairs.find(p => p.id === id);
                    if (pair) pair.value = this.value;
                    updatePreview();
                });
                
                deleteBtn.addEventListener('click', function() {
                    pairs = pairs.filter(p => p.id !== id);
                    pairElement.remove();
                    updatePreview();
                    
                    if (pairs.length === 0 && emptyMessage) {
                        emptyMessage.style.display = 'block';
                    }
                });
                
                // Drag and drop for reordering
                pairElement.addEventListener('dragstart', function() {
                    draggedItem = pairElement;
                    setTimeout(() => {
                        pairElement.classList.add('dragging');
                    }, 0);
                });
                
                pairElement.addEventListener('dragend', function() {
                    pairElement.classList.remove('dragging');
                    draggedItem = null;
                });
                
                dragHandle.addEventListener('mousedown', function() {
                    pairElement.draggable = true;
                });
                
                dragHandle.addEventListener('mouseup', function() {
                    pairElement.draggable = false;
                });
                
                updatePairCount();
            }
            
            // Load existing pairs from JSON
            function loadPairs(json) {
                // Clear existing pairs
                pairs = [];
                // Keep emptyMessage in the container but hide it
                if (emptyMessage) {
                    emptyMessage.style.display = 'none';
                }
                // Remove all pair elements except emptyMessage
                const pairElements = Array.from(keyValuePairs.querySelectorAll('[data-id]'));
                pairElements.forEach(el => el.remove());
                
                // Add new pairs from JSON
                for (const [key, value] of Object.entries(json)) {
                    // Handle null/undefined values by converting them to empty strings
                    const safeValue = (value === null || value === undefined) ? '' : value.toString();
                    addPair(key, safeValue);
                }
                
                // Show empty message if no pairs were loaded
                if (pairs.length === 0 && emptyMessage) {
                    emptyMessage.style.display = 'block';
                }
                
                updatePreview();
            }
            
            // Generate JSON from pairs
            function generateJSON() {
                const jsonObj = {};
                pairs.forEach(pair => {
                    jsonObj[pair.key] = pair.value;
                });
                return JSON.stringify(jsonObj, null, 4);
            }
            
            // Update JSON preview
            function updatePreview() {
                jsonPreview.textContent = generateJSON();
                updatePairCount();
            }
            
            // Update pair count display
            function updatePairCount() {
                pairCount.textContent = pairs.length;
            }
            
            // Initialize drag and drop for reordering
            keyValuePairs.addEventListener('dragover', function(e) {
                e.preventDefault();
                const afterElement = getDragAfterElement(keyValuePairs, e.clientY);
                if (draggedItem && afterElement && afterElement.element !== draggedItem) {
                    if (afterElement.position === 'after') {
                        keyValuePairs.insertBefore(draggedItem, afterElement.element.nextSibling);
                    } else {
                        keyValuePairs.insertBefore(draggedItem, afterElement.element);
                    }
                    
                    // Update the pairs array to match the new order
                    const draggedId = parseInt(draggedItem.dataset.id);
                    const afterId = parseInt(afterElement.element.dataset.id);
                    
                    const draggedIndex = pairs.findIndex(p => p.id === draggedId);
                    const afterIndex = pairs.findIndex(p => p.id === afterId);
                    
                    const [removed] = pairs.splice(draggedIndex, 1);
                    const newIndex = afterElement.position === 'after' ? afterIndex + 1 : afterIndex;
                    pairs.splice(newIndex, 0, removed);
                }
            });
            
            function getDragAfterElement(container, y) {
                const draggableElements = [...container.querySelectorAll('[data-id]:not(.dragging)')];
                
                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;
                    
                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child, position: 'before' };
                    } else if (offset >= 0 && offset < closest.offset) {
                        return { offset: offset, element: child, position: 'after' };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY });
            }
            
            // Update all keys when GameMaker checkbox is toggled
            gmCheckbox.addEventListener('change', function() {
                document.querySelectorAll('.event-dropdown-container').forEach(container => {
                    if (this.checked) {
                        container.classList.remove('hidden');
                    } else {
                        container.classList.add('hidden');
                    }
                });

                const keyInputs = document.querySelectorAll('.key-input');
                keyInputs.forEach(input => {
                    const event = new Event('input');
                    input.dispatchEvent(event);
                });
                
                // Update labels
                document.querySelectorAll('[data-id]').forEach(pair => {
                    const label = pair.querySelector('label');
                    if (label) {
                        label.textContent = this.checked ? 'Resource' : 'Key';
                    }
                    const input = pair.querySelector('.key-input');
                    if (input) {
                        input.placeholder = this.checked ? 'Enter resource (e.g. obj_player)' : 'Enter key';
                    }
                });
            });

                // Add event dropdown change handler
                const eventDropdown = pairElement.querySelector('.event-dropdown');
                if (eventDropdown) {
                    eventDropdown.addEventListener('change', function() {
                        const pair = pairs.find(p => p.id === id);
                        if (pair) {
                            pair.event = this.value;
                            updateKey(pairElement, pair);
                        }
                    });
                    
                    // Set initial event value
                    const pair = pairs.find(p => p.id === id);
                    if (pair) {
                        eventDropdown.value = pair.event;
                    }
                }
            

            // Add initial example pair
            const initialPair = addPair('example_key', 'example_value');
        });
    </script>
</body>
</html>
